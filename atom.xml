<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lilinzta&#39;s blog</title>
  
  
  <link href="https://lilinzta.github.io/atom.xml" rel="self"/>
  
  <link href="https://lilinzta.github.io/"/>
  <updated>2025-04-20T10:13:55.706Z</updated>
  <id>https://lilinzta.github.io/</id>
  
  <author>
    <name>Haotian Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 BPB Panel 和 cloudflare pages 科学上网</title>
    <link href="https://lilinzta.github.io/2025/04/19/%E4%BD%BF%E7%94%A8-BPB-Panel-%E5%92%8C-cloudflare-pages-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://lilinzta.github.io/2025/04/19/%E4%BD%BF%E7%94%A8-BPB-Panel-%E5%92%8C-cloudflare-pages-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2025-04-19T01:21:56.000Z</published>
    <updated>2025-04-20T10:13:55.706Z</updated>
    
    <content type="html"><![CDATA[<p>这个方案是完全免费的，存在一定的封号风险，推荐使用临时邮箱注册 cloudflare</p><span id="more"></span><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul><li>从 github release 下载 <a href="https://github.com/bia-pain-bache/BPB-Worker-Panel/releases/download/v3.2.3/worker.zip">worker.zip(v3.2.3)</a> 文件，此文件为混淆后的 js 代码</li><li>使用邮箱登陆 <a href="https://www.cloudflare.com/">cloudflare</a> 账号</li><li>科学上网客户端软件</li></ul><h2 id="2-详细步骤"><a href="#2-详细步骤" class="headerlink" title="2. 详细步骤"></a>2. 详细步骤</h2><p>通过上传 worker.zip 文件的方式创建 Pages 应用</p><img src=/res/post/bpb-panel/pages.jpg width=100% /><p>在 cloudflare 面板左侧选择 Storage &amp; Databases 创建 kv 存储，名称随意，后续会用到</p><p>在 Pages 应用的 Settings 页面添加 <code>PROXY_IP</code> <code>TR_PASS</code> <code>UUID</code> 三个变量并绑定上一步创建的 KV namespace，注意 name 必须为小写的 kv</p><img src=/res/post/bpb-panel/settings.png width=100% /><ul><li>PROXY_IP: cloudlare 为了防止某些别有用心的人使用 cloudflare 家的服务器 DDOS cloudflare 自己家的服务器，禁止了 cloudflare 服务间的互相访问，设置 PROXY_IP 能够解决这个问题和起到固定 ip 的作用，PROXY_IP 有多种获取途径，推荐一个地方: <a href="https://github.com/NiREvil/vless/blob/main/sub/ProxyIP.md">NiREvil&#x2F;vless</a></li><li>TR_PASS: 任意密码即可</li><li>UUID: 网站在线生成，问大语言模型，GNU&#x2F;Linux 可用 <code>uuidgen</code> 命令生成</li></ul><p>选择 Create deployment 重新上传 worker.zip 以应用更改</p><p>访问 <code>https://&lt;pages_name&gt;.pages.dev/panel</code> 页面，首次访问好像会提示设置密码？</p><p>面板默认的配置即可 work，可以自己探索，从下面的 Subscriptions - Configs 复制订阅连接</p><h2 id="3-局限性"><a href="#3-局限性" class="headerlink" title="3. 局限性"></a>3. 局限性</h2><p>对于每个单次请求，cloudflare 能够提供的 cpu 时长有限，不能保持长时间连接，在下载大文件时会中断(不支持断点重传就很难受)，比如 docker 拉取大的镜像时就会中断</p><p>但这仍然是最好的免费科学上网方案(之一)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个方案是完全免费的，存在一定的封号风险，推荐使用临时邮箱注册 cloudflare&lt;/p&gt;</summary>
    
    
    
    
    <category term="cloudflare" scheme="https://lilinzta.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>mise - 开发利器</title>
    <link href="https://lilinzta.github.io/2025/03/07/mise-%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/"/>
    <id>https://lilinzta.github.io/2025/03/07/mise-%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/</id>
    <published>2025-03-07T12:19:21.000Z</published>
    <updated>2025-03-10T14:38:06.026Z</updated>
    
    <content type="html"><![CDATA[<p>你说的对，但是 <a href="https://github.com/jdx/mise">mise</a> 是由 <a href="https://www.rust-lang.org/">rust</a> 编程语言独立开发的管理开发工具的工具</p><span id="more"></span><h2 id="1-quickstart"><a href="#1-quickstart" class="headerlink" title="1. quickstart"></a>1. quickstart</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mise use -g python@latest<br></code></pre></td></tr></table></figure><p>下载 python latest version 到 .local&#x2F;share&#x2F;mise 下，windows 大概是 AppData 类似的目录，并添加到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">~<br>❯  <span class="hljs-built_in">which</span> python<br>/home/lilin/.local/share/mise/installs/python/3.13.2/bin/python<br></code></pre></td></tr></table></figure><p>或者，在编辑 mise 的配置文件后，简单执行 <code>mise install</code> 命令(在迁移系统时很有用，感觉可以直接放到 dotfiles 里了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">~<br>❯ bat .config/mise/config.toml<br>───────┬─────────────────────────────────────────────────<br>       │ File: .config/mise/config.toml<br>───────┼─────────────────────────────────────────────────<br>   1   │ [tools]<br>   2   │ deno = <span class="hljs-string">&quot;latest&quot;</span><br>   3   │ flutter = <span class="hljs-string">&quot;latest&quot;</span><br>   4   │ gcc-arm-none-eabi = <span class="hljs-string">&quot;latest&quot;</span><br>   5   │ node = <span class="hljs-string">&quot;latest&quot;</span><br>   6   │ python = <span class="hljs-string">&quot;latest&quot;</span><br>   7   │<br>   8   │ [<span class="hljs-built_in">env</span>]<br>───────┴─────────────────────────────────────────────────<br></code></pre></td></tr></table></figure><h2 id="2-use-with-uv"><a href="#2-use-with-uv" class="headerlink" title="2. use with uv"></a>2. use with uv</h2><p><a href="https://github.com/astral-sh/uv">uv</a> 是一个极快的 python 包和项目的管理器，只需把原来的 <code>pip install</code> 换成 <code>uv pip install</code> 就能肉眼可见地感受到 uv 的快</p><p>当使用 <a href="https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html">micromamba</a> 的 env 时，可以直接使用 <code>uv pip install</code> 来安装包，而使用 mise 时，则需添加 <code>--system</code> 参数，安装的包会放在 mise 相关的目录下而非系统目录，在运行 <code>uv pip install</code> 命令时会有提示</p><blockquote><p>tips: 建议 alias pip&#x3D;’uv pip’</p></blockquote><h2 id="3-Ending"><a href="#3-Ending" class="headerlink" title="3. Ending"></a>3. Ending</h2><p>GNU&#x2F;Linux 发行版通常自带 python 作为系统依赖，以及一些 python-xxx 的 python 包，并不是每一个 python 包都被每一个发行版所打包，我们需要虚拟环境</p><p>而不同的人喜欢不同的工具，所以同时使用 micromamba 和 mise，对于一些 conda 项目，使用 micromamba 更为方便，而对于一些小型的 python 项目和自己写的 python 代码则可以使用 mise 安装的 python，并且可以装一些非常非常常用的包，作为日常使用的环境</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你说的对，但是 &lt;a href=&quot;https://github.com/jdx/mise&quot;&gt;mise&lt;/a&gt; 是由 &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;rust&lt;/a&gt; 编程语言独立开发的管理开发工具的工具&lt;/p&gt;</summary>
    
    
    
    
    <category term="mise" scheme="https://lilinzta.github.io/tags/mise/"/>
    
  </entry>
  
  <entry>
    <title>netlify 使用体验</title>
    <link href="https://lilinzta.github.io/2025/03/03/netlify-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>https://lilinzta.github.io/2025/03/03/netlify-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</id>
    <published>2025-03-03T03:32:40.000Z</published>
    <updated>2025-03-03T09:49:51.617Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是：我打算让 shell_gpt 使用 gemini api</p><span id="more"></span><p>shell_gpt 在 github 上有仓库，所以直接点开 issues 搜索 gemini, 找到了这个 <a href="https://github.com/TheR1D/shell_gpt/issues/514#issuecomment-2005454545">issue</a> 和这个仓库 <a href="https://github.com/PublicAffairs/openai-gemini">openai-gemini</a></p><p>仓库的 README 中写了多种 serverless 部署的方案，包括 Vercel、Netlify、Cloudflare、Deno 和本地部署，因为不想占用本地资源，所以从 Vercel 开始一个一个往后试，只有 Netlify 在使用 github 登陆之后，无需任何其它操作就可以直接使用。</p><p>部署完成后，修改 shell_gpt 配置中的 <code>API_BASE_URL=https://&#123;site-name&#125;.netlify.app/v1</code></p><p>在搞定 shell_gpt 使用 gemini api 之后，发现 Netlify 居然可以直连，速度也是很快。</p><p>于是乎，选择新建站点，从 github 创建，选择本博客的 github 仓库，最后换一个自己喜欢的 site name，就大功告成了。</p><p>现在可以通过 <a href="https://lilinzta.github.io/">https://lilinzta.github.io</a> 或 <a href="https://lilinzta.netlify.app/">https://lilinzta.netlify.app</a> 访问本博客了，白嫖党大胜利！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的起因是：我打算让 shell_gpt 使用 gemini api&lt;/p&gt;</summary>
    
    
    
    <category term="LLM" scheme="https://lilinzta.github.io/categories/LLM/"/>
    
    
    <category term="netlify" scheme="https://lilinzta.github.io/tags/netlify/"/>
    
  </entry>
  
  <entry>
    <title>clash-verge-rev 完全配置</title>
    <link href="https://lilinzta.github.io/2024/11/26/clash-verge-rev-%E5%AE%8C%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://lilinzta.github.io/2024/11/26/clash-verge-rev-%E5%AE%8C%E5%85%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2024-11-26T02:09:56.000Z</published>
    <updated>2025-03-03T03:38:53.725Z</updated>
    
    <content type="html"><![CDATA[<p>最近 clash-verge-rev 升级到了 v2.0，借此机会进行一次完整的配置。</p><span id="more"></span><h2 id="1-情况说明"><a href="#1-情况说明" class="headerlink" title="1.情况说明"></a>1.情况说明</h2><p>我一直是装了 v2raya 和 clash-verge-rev 这两个代理工具的，因为平时经常使用 BT 下载，而 v2raya 官方文档提供了 BT 下载直连的配置示例(qbittorrent 单独使用一个直连端口)，但是 clash-verge-rev 官方文档并没有细说，所以之前一直在用 v2raya。</p><p>以这次更新为契机，我踏上了探索 clash-verge-rev 配置的道路。</p><h2 id="2-clash-verge-rev-配置文件加载流程"><a href="#2-clash-verge-rev-配置文件加载流程" class="headerlink" title="2.clash-verge-rev 配置文件加载流程"></a>2.clash-verge-rev 配置文件加载流程</h2><ol><li>选择并加载一个订阅文件(sub.yaml)</li><li>加载全局扩展配置文件(Merge.yaml)</li><li>加载全局扩展脚本文件(Script.js)</li><li>加载订阅专有的扩展配置文件(rules.yaml、proxies.yaml、proxy-groups.yaml、extend_config.yaml)</li><li>加载订阅专有的扩展脚本文件(script_config.js)</li></ol><p>我只使用扩展配置，所以忽略 3 和 5 两个步骤，如下图：</p><img src=/res/post/clash-verge-rev/verge.png width=100%/><h2 id="3-我的选择"><a href="#3-我的选择" class="headerlink" title="3.我的选择"></a>3.我的选择</h2><p>分流规则使用<a href="https://github.com/Loyalsoldier/clash-rules">Loyalsoldier&#x2F;clash-rules</a>，白名单模式(大部分时间都在使用白嫖的订阅，不缺流量)，删除机场提供的所有规则</p><p>之前困扰我的 BT 下载直连问题也由 <code>RULE-SET,applications,DIRECT</code> 这条规则通过匹配进程名(qbittorrent)得到了解决🥰</p><p>我的相关配置也全部贴在下面：</p><ul><li>全局扩展配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Profile Enhancement Merge Template for Clash Verge</span><br><span class="hljs-attr">profile:</span><br>  <span class="hljs-attr">store-selected:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Custom DIRECT rules below</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;DOMAIN,api.eehk.net,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;DOMAIN,proc.xn--l9qyaz082a.cn,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;DOMAIN,api.chatanywhere.tech,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;DOMAIN-REGEX,^dl-[A-Za-z0-9-]+\.mypikpak\.com$,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,applications,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,private,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,reject,REJECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,icloud,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,apple,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,direct,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,lancidr,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,cncidr,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;GEOIP,LAN,DIRECT&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;GEOIP,CN,DIRECT&#x27;</span><br><br><span class="hljs-comment"># From https://github.com/Loyalsoldier/clash-rules</span><br><span class="hljs-attr">rule-providers:</span><br>  <span class="hljs-attr">reject:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/reject.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/reject.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">icloud:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/icloud.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/icloud.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">apple:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/apple.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/apple.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">google:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/google.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/google.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">proxy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/proxy.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/proxy.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">direct:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/direct.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">private:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/private.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/private.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">gfw:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/gfw.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/gfw.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">tld-not-cn:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">domain</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/tld-not-cn.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/tld-not-cn.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">telegramcidr:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">ipcidr</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/telegramcidr.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/telegramcidr.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">cncidr:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">ipcidr</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/cncidr.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">lancidr:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">ipcidr</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/lancidr.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br><br>  <span class="hljs-attr">applications:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">behavior:</span> <span class="hljs-string">classical</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt&quot;</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./ruleset/applications.yaml</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">86400</span><br></code></pre></td></tr></table></figure><ul><li>订阅专有规则配置</li></ul><p>机场提供的订阅中的 proxy groups 不尽相同，所以添加在订阅专有配置而不是全局扩展配置，而 DIRECT 和 REJECT 已经存在于 clash 的 policy(路由策略&#x2F;流量处理策略)中，与订阅无关，所以加在上面的全局扩展配置中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">prepend:</span> []<br><span class="hljs-attr">append:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,google,[订阅提供的代理组]&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,proxy,[订阅提供的代理组]&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;RULE-SET,telegramcidr,[订阅提供的代理组]&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;MATCH,[订阅提供的代理组]&#x27;</span><br><span class="hljs-attr">delete:</span><br>  <span class="hljs-comment"># all rules provided by subscription</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近 clash-verge-rev 升级到了 v2.0，借此机会进行一次完整的配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="clash-verge-rev" scheme="https://lilinzta.github.io/tags/clash-verge-rev/"/>
    
  </entry>
  
  <entry>
    <title>AUR 打包初体验</title>
    <link href="https://lilinzta.github.io/2024/11/18/AUR-%E6%89%93%E5%8C%85%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://lilinzta.github.io/2024/11/18/AUR-%E6%89%93%E5%8C%85%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2024-11-18T02:28:19.000Z</published>
    <updated>2024-11-18T03:19:51.120Z</updated>
    
    <content type="html"><![CDATA[<p>第一次往 AUR 上传 PKGBUILD，并没有什么特别的感觉，因为是二进制包，只做了文件的拷贝。</p><span id="more"></span><h2 id="1-注册-AUR-账户并上传-ssh-公钥"><a href="#1-注册-AUR-账户并上传-ssh-公钥" class="headerlink" title="1. 注册 AUR 账户并上传 ssh 公钥"></a>1. 注册 AUR 账户并上传 ssh 公钥</h2><p>archlinux 的论坛和 AUR 用的不是同一个账号，需要单独注册一个 AUR 账号，然后在个人设置里添加 ssh 公钥，上传 ssh 公钥后，才可以上传 PKGBUILD。</p><p>wiki 推荐单独为 AUR 创建新的 ssh 密钥对，而不是使用现有的 ssh 密钥对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -f ~/.ssh/aur<br></code></pre></td></tr></table></figure><p>然后编辑 ~&#x2F;.ssh&#x2F;config 文件，添加如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host aur.archlinux.org<br>  IdentityFile ~/.ssh/aur<br>  User aur<br></code></pre></td></tr></table></figure><h2 id="2-创建软件包仓库"><a href="#2-创建软件包仓库" class="headerlink" title="2. 创建软件包仓库"></a>2. 创建软件包仓库</h2><blockquote><p>Tips: &lt;pkgname&gt; 中不应包含大写字母，否则会创建失败。</p></blockquote><p>从零开始创建一个 package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -c init.defaultBranch=master <span class="hljs-built_in">clone</span> ssh://aur@aur.archlinux.org/&lt;pkgname&gt;.git<br></code></pre></td></tr></table></figure><p>本地已经有了一个 package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -c init.defaultBranch=master init<br>git remote add &lt;label&gt; ssh://aur@aur.archlinux.org/&lt;pkgname&gt;.git<br></code></pre></td></tr></table></figure><p>使用 <code>git config user.name</code> 和 <code>git config user.email</code> 为 package 设置提交者信息，否则会使用全局的提交者信息</p><h2 id="3-关于-PKGBUILD-的编写"><a href="#3-关于-PKGBUILD-的编写" class="headerlink" title="3. 关于 PKGBUILD 的编写"></a>3. 关于 PKGBUILD 的编写</h2><p>新上传的 package 要在 PKGBUILD 头部加上如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Maintainer: Your Name &lt;address at domain dot tld&gt;</span><br></code></pre></td></tr></table></figure><p>如果是从别人那里接手的 package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Maintainer: Your name &lt;address at domain dot tld&gt;</span><br><span class="hljs-comment"># Maintainer: Other maintainer&#x27;s name &lt;address at domain dot tld&gt;</span><br><span class="hljs-comment"># Contributor: Previous maintainer&#x27;s name &lt;address at domain dot tld&gt;</span><br><span class="hljs-comment"># Contributor: Original submitter&#x27;s name &lt;address at domain dot tld&gt;</span><br></code></pre></td></tr></table></figure><p>另外，关于 PKGBUILD 的主体内容。感觉大家编写风格各异，可以多参考一下别人的 PKGBUILD，能 work 即可，之后再考虑其它的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次往 AUR 上传 PKGBUILD，并没有什么特别的感觉，因为是二进制包，只做了文件的拷贝。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="AUR" scheme="https://lilinzta.github.io/tags/AUR/"/>
    
  </entry>
  
  <entry>
    <title>proton(wine) 和 windows 虚拟机共用同一个 AppData</title>
    <link href="https://lilinzta.github.io/2024/11/07/proton-wine-%E5%92%8C-windows-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B1%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA-AppData/"/>
    <id>https://lilinzta.github.io/2024/11/07/proton-wine-%E5%92%8C-windows-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B1%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA-AppData/</id>
    <published>2024-11-07T12:07:56.000Z</published>
    <updated>2024-11-18T02:30:07.673Z</updated>
    
    <content type="html"><![CDATA[<p>目的是在 linux(proton&#x2F;wine) 和 windows 虚拟机之间共享一些东西。例如：游戏存档和，好吧，游戏存档。</p><span id="more"></span><h2 id="1-This-is-a-title"><a href="#1-This-is-a-title" class="headerlink" title="1.This is a title"></a>1.This is a title</h2><p>说一下这个想法是如何产生的，以及如何失败的。</p><p>虽然，我的 arch 上装了 vmware workstation，大部分时间都存在不止一个 windows 虚拟机，但是，一直都是非必要不开机的。必要情况大概也只有使用 microsoft office 套件了，你可能会说，我们已经有 wps for linux 了，一开始我也是这么想的，直到某一次使用 wps for linux 编辑了一个报告，我望着预览图陷入了沉思，当然，也有可能是我编辑方式不对。总之，从那以后就再也没有用过 wps for linux 了。另外，某些计算机课程需要用到某些只适配了 windows 的软件，具体哪些软件就不说了(其实还挺多的)。</p><p>我的笔记本电脑配置比较低，所以平常也就只玩一下实用性比较高的视觉小说游戏 and so on 而已。直到有一次，辛辛苦苦玩了大半天才通关的游戏，存档被我删了(本人有强烈的赛博洁癖，会经常性地删除&#x2F;清理文件)，才开始善用 linux 下的软链接。</p><p>发明软链接的人真是个天才。自从利用起了软链接，再也不用担心误删存档的问题了，新开一个 wine 容器，创建软链接指向备份好的 AppData 就好了。</p><p>proton 和 wine 的区别在于(对于我来说)，proton 自带或者说捆绑了一些依赖，对于某些含有 CG 动画、OP 和 ED 的游戏支持更好(实测可以播放千原万神中的视频，即使终端会报 gstreamer 的 WARNING)。另外，据说对于大型游戏，proton 的帧数更高。我装的<a href="https://aur.archlinux.org/packages?O=0&K=proton-ge-custom-bin">proton-ge-custom-bin</a>这个包。</p><h2 id="2-This-is-also-a-title"><a href="#2-This-is-also-a-title" class="headerlink" title="2.This is also a title"></a>2.This is also a title</h2><p>在实际开始之前，我以为 windows 的快捷方式就对应于 linux 下的软链接。实际上，终端 <code>dir</code> 输出的结果是 *.lnk，这很明显就不对了，问了一下 gpt，windows 创建软链接的格式是这样的 <code>mklink [选项] &lt;链接&gt; &lt;目标&gt;</code>，使用 &#x2F;D 选项创建目录的软链接。</p><p>有意思的部分开始了。我想着虚拟机里也没啥有价值的东西，索性直接把原有的 AppData 删了，直接创建软链接。但是，windows 运行中需要 AppData 文件夹，直接删删不掉，改名呢？又不让改。</p><p>一不做二不休，我进了 PE，备份了 AppData，创建了软链接。重启，结果直接来到了 Temp 用户。</p><p>事后一想，这个结果也确实很合理，windows 开机的时候就需要 AppData 这个文件夹，而这时候，vmware tools 还没有启动，共享文件夹没生效，软链接指向为空，自然就加载不了用户的 AppData 文件夹，就使用 Temp 用户登录了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目的是在 linux(proton&amp;#x2F;wine) 和 windows 虚拟机之间共享一些东西。例如：游戏存档和，好吧，游戏存档。&lt;/p&gt;</summary>
    
    
    
    
    <category term="proton" scheme="https://lilinzta.github.io/tags/proton/"/>
    
  </entry>
  
  <entry>
    <title>rclone</title>
    <link href="https://lilinzta.github.io/2024/10/30/rclone/"/>
    <id>https://lilinzta.github.io/2024/10/30/rclone/</id>
    <published>2024-10-30T12:53:10.000Z</published>
    <updated>2024-11-18T03:24:55.927Z</updated>
    
    <content type="html"><![CDATA[<p>官方介绍：Rclone (“rsync for cloud storage”) is a command-line program to sync files and directories to and from different cloud storage providers.</p><span id="more"></span><p>最近接触到很多在 pikpak 上的资源(具体什么资源就不说了)，奈何 pikpak 并没有官方 GNU&#x2F;Linux 的客户端，浏览器也不提供下载。开始在 github 上寻找解决方案，于是就有了这篇博客。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><a href="https://github.com/rclone/rclone">Rclone</a> 是一个命令行工具，用于在云存储上同步文件和文件夹。它可以将本地文件夹或文件同步到云存储中，或将云存储中的文件夹或文件同步到本地(插一句话，前面这句话是 <a href="https://codeium.com/">Codeium</a> 提示的，我只按了 Tab 键。不止代码，文本也能提示，确实好用)。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><h3 id="2-1-Arch-Linux"><a href="#2-1-Arch-Linux" class="headerlink" title="2.1.Arch Linux"></a>2.1.Arch Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S rclone<br></code></pre></td></tr></table></figure><p>另外有个 <a href="https://github.com/kapitainsky/RcloneBrowser">rclone-browser</a> 的 GUI 应用，不过很久没更新了</p><h3 id="2-2-Windows"><a href="#2-2-Windows" class="headerlink" title="2.2.Windows"></a>2.2.Windows</h3><p><a href="https://github.com/rclone/rclone/releases/latest">release</a> 提供了 Windows 对应的版本</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><p><code>rclone --help</code> 这种程度的大家都会，就不说了。</p><p>执行 <code>rclone config</code> 创建 remote 配置，就可以使用了。</p><p>执行 <code>rclone about [remote]</code> 查看云存储使用情况。</p><p>我添加了 dropbox：、gdrive：、mdrive：、mega：、pikpak: 这几个 remote 配置，可以用 <code>rclone listremotes</code> 查看。</p><p>登陆方式大致有两种，1. 提供用户名和密码，2. 跳转到浏览器登陆，应用会自动获取 token，然后填充到配置文件中。</p><p>更详细的说明请移步官方文档：<a href="https://rclone.org/">https://rclone.org</a></p><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><p>上传文件<br><img src=/res/post/rclone/copy.jpg width=100% /></p><p>查看结果<br><img src=/res/post/rclone/pikpak.png width=100% /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;官方介绍：Rclone (“rsync for cloud storage”) is a command-line program to sync files and directories to and from different cloud storage providers.&lt;/p&gt;</summary>
    
    
    
    
    <category term="rclone" scheme="https://lilinzta.github.io/tags/rclone/"/>
    
  </entry>
  
  <entry>
    <title>auto_giwifi_python</title>
    <link href="https://lilinzta.github.io/2024/07/02/auto-giwifi-python/"/>
    <id>https://lilinzta.github.io/2024/07/02/auto-giwifi-python/</id>
    <published>2024-07-02T09:32:55.000Z</published>
    <updated>2024-07-02T13:57:56.195Z</updated>
    
    <content type="html"><![CDATA[<p>算是本人的第一个有点儿实际意义的项目，尽管代码大部分是GPT-4o生成的😅</p><span id="more"></span><p>早在大一的时候，就想白嫖 giwifi 了，奈何资源和技术都有限，所以也仅仅是有过这个想法而已。</p><p>直到今年6月末，买的 giwifi 到期了，到网页端认证的时候才发现，一直请求就可以无限试用，尽管每次只有10分钟。</p><p>其实很早就在网上看到过这个方法，当时那个信息就很老了。我以为 giwifi 应该早就修复了这个东西，采用一种更高明的手段，没想到……</p><p>互联网上找得到的资料(指关于如何白嫖 giwifi 的资料)，基本都比较老了。新一些的方法都是用的软路由，还是有一定的成本的。</p><p>直到我在 github 上无意间看到了 <a href="https://github.com/GiraffeLe/Auto-Giwifi">GiraffeLe&#x2F;Auto-Giwifi</a> 这个仓库，虽然最后没有直接用到，但是提供了很好的思路，让我理清了整个认证登陆的过程。</p><p>最终我用 python 实现了类似的功能(加了个循环请求的功能，就能一直白嫖辣🥰)，仓库地址在这里 <a href="https://github.com/Lilinzta/auto_giwifi_python">auto_giwifi_python</a>。遗憾的一点是我的实现并不是很好，因为有点重了，使用到了 selenium 这个库，浏览器无头模式什么的(GPT-4o推荐的。纯 requests 实现碰壁了，以后可能会再试一试)。</p><p>总之，如果没有非常实时的网络需求的话，这个东西还是可以一用的。</p><p>如果对你有用的话，不妨给个 🌟 (图穷匕见了，haha)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算是本人的第一个有点儿实际意义的项目，尽管代码大部分是GPT-4o生成的😅&lt;/p&gt;</summary>
    
    
    
    
    <category term="giwifi" scheme="https://lilinzta.github.io/tags/giwifi/"/>
    
  </entry>
  
  <entry>
    <title>在没有按住 Shift 键时隐藏 GRUB 界面</title>
    <link href="https://lilinzta.github.io/2024/05/09/%E5%9C%A8%E6%B2%A1%E6%9C%89%E6%8C%89%E4%BD%8F-Shift-%E9%94%AE%E6%97%B6%E9%9A%90%E8%97%8F-GRUB-%E7%95%8C%E9%9D%A2/"/>
    <id>https://lilinzta.github.io/2024/05/09/%E5%9C%A8%E6%B2%A1%E6%9C%89%E6%8C%89%E4%BD%8F-Shift-%E9%94%AE%E6%97%B6%E9%9A%90%E8%97%8F-GRUB-%E7%95%8C%E9%9D%A2/</id>
    <published>2024-05-09T02:13:10.000Z</published>
    <updated>2024-11-18T03:19:39.899Z</updated>
    
    <content type="html"><![CDATA[<p>为了获取更快的启动速度，而不用等 GRUB 倒计时，可以命令 GRUB 在启动时隐藏目录，仅在 Shift 被按住的时候才显示</p><span id="more"></span><h2 id="1-将如下内容添加到-etc-default-grub-启动这个功能"><a href="#1-将如下内容添加到-etc-default-grub-启动这个功能" class="headerlink" title="1.将如下内容添加到 /etc/default/grub 启动这个功能"></a>1.将如下内容添加到 <code>/etc/default/grub</code> 启动这个功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_FORCE_HIDDEN_MENU=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-然后创建-etc-grub-d-31-hold-shift-文件并写入以下内容"><a href="#2-然后创建-etc-grub-d-31-hold-shift-文件并写入以下内容" class="headerlink" title="2.然后创建&#x2F;etc&#x2F;grub.d&#x2F;31_hold_shift 文件并写入以下内容"></a>2.然后创建&#x2F;etc&#x2F;grub.d&#x2F;31_hold_shift 文件并写入以下内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-built_in">set</span> -e<br><br>prefix=<span class="hljs-string">&quot;/usr&quot;</span><br>exec_prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;prefix&#125;</span>&quot;</span><br>datarootdir=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;prefix&#125;</span>/share&quot;</span><br><br><span class="hljs-built_in">export</span> TEXTDOMAIN=grub<br><span class="hljs-built_in">export</span> TEXTDOMAINDIR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;datarootdir&#125;</span>/locale&quot;</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;datarootdir&#125;</span>/grub/grub-mkconfig_lib&quot;</span><br><br>found_other_os=<br><br><span class="hljs-function"><span class="hljs-title">make_timeout</span></span> () &#123;<br><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;GRUB_FORCE_HIDDEN_MENU&#125;</span>&quot;</span> = <span class="hljs-string">&quot;xtrue&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ] ; <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT_QUIET&#125;</span>&quot;</span> = <span class="hljs-string">&quot;xtrue&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    verbose=<br>      <span class="hljs-keyword">else</span><br>    verbose=<span class="hljs-string">&quot; --verbose&quot;</span><br>      <span class="hljs-keyword">fi</span><br><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> = <span class="hljs-string">&quot;x0&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if keystatus; then</span><br><span class="hljs-string">    if keystatus --shift; then</span><br><span class="hljs-string">      set timeout=-1</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  else</span><br><span class="hljs-string">    if sleep$verbose --interruptible 3 ; then</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br>      <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if sleep$verbose --interruptible $&#123;GRUB_HIDDEN_TIMEOUT&#125; ; then</span><br><span class="hljs-string">    set timeout=0</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br>      <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">adjust_timeout</span></span> () &#123;<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$GRUB_BUTTON_CMOS_ADDRESS</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if cmostest $GRUB_BUTTON_CMOS_ADDRESS ; then</span><br><span class="hljs-string">EOF</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT_BUTTON&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT_BUTTON&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-keyword">else</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">else</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br>  adjust_timeout<br><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if keystatus; then</span><br><span class="hljs-string">    if keystatus --shift; then</span><br><span class="hljs-string">      set timeout=-1</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  else</span><br><span class="hljs-string">    if sleep$verbose --interruptible 3 ; then</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="3-给-31-hold-shift-文件可执行权限，然后重新生成主配置文件"><a href="#3-给-31-hold-shift-文件可执行权限，然后重新生成主配置文件" class="headerlink" title="3.给 31_hold_shift 文件可执行权限，然后重新生成主配置文件"></a>3.给 <code>31_hold_shift</code> 文件可执行权限，然后重新生成主配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /etc/grub.d/31_hold_shift<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了获取更快的启动速度，而不用等 GRUB 倒计时，可以命令 GRUB 在启动时隐藏目录，仅在 Shift 被按住的时候才显示&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="GRUB" scheme="https://lilinzta.github.io/tags/GRUB/"/>
    
  </entry>
  
  <entry>
    <title>RHEL 安装 Zabbix</title>
    <link href="https://lilinzta.github.io/2024/04/18/RHEL-%E5%AE%89%E8%A3%85-Zabbix/"/>
    <id>https://lilinzta.github.io/2024/04/18/RHEL-%E5%AE%89%E8%A3%85-Zabbix/</id>
    <published>2024-04-18T02:06:15.000Z</published>
    <updated>2024-11-18T03:19:27.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例"><a href="#RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例" class="headerlink" title="RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)"></a>RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)</h2><span id="more"></span><h2 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="1.Prepare"></a>1.Prepare</h2><table><thead><tr><th align="center">Zabbix Version</th><th align="center">OS Distribution</th><th align="center">Zabbix Component</th><th align="center">DB</th><th align="center">Web Server</th></tr></thead><tbody><tr><td align="center">6.0 LTS</td><td align="center">Red Hat Enterprise Linux</td><td align="center">Server, Frontend, Agent</td><td align="center">MariaDB</td><td align="center">Nginx</td></tr></tbody></table><h2 id="2-Install-Zabbix-repository"><a href="#2-Install-Zabbix-repository" class="headerlink" title="2.Install Zabbix repository"></a>2.Install Zabbix repository</h2><p>禁用 EPEL 提供的 Zabbix 软件包(如果已安装)。编辑文件 &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo 并添加以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[epel]<br>...<br>excludepkgs=zabbix*<br></code></pre></td></tr></table></figure><p>继续安装 zabbix 存储库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# rpm -Uvh https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-6.0-4.el9.noarch.rpm<br>[root@fedora:~]# dnf clean all<br></code></pre></td></tr></table></figure><h2 id="3-Install-Zabbix-server-frontend-agent"><a href="#3-Install-Zabbix-server-frontend-agent" class="headerlink" title="3.Install Zabbix server, frontend, agent"></a>3.Install Zabbix server, frontend, agent</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent<br></code></pre></td></tr></table></figure><h2 id="4-Create-initial-database"><a href="#4-Create-initial-database" class="headerlink" title="4.Create initial database"></a>4.Create initial database</h2><p>请确保已启动并运行数据库服务器。<br>在数据库主机上运行以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# mysql -uroot -p<br>password<br>mysql&gt; create database zabbix character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_bin;<br>mysql&gt; create user zabbix@localhost identified by <span class="hljs-string">&#x27;&lt;your_password&gt;&#x27;</span>;<br>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 1;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><p>在 Zabbix Server 主机上，导入初始模式和数据。系统将提示您输入新创建的密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p zabbix<br></code></pre></td></tr></table></figure><p>导入数据库后禁用 log_bin_trust_function_creators 选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# mysql -uroot -p<br>password<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 0;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h2 id="5-Configure-the-database-for-Zabbix-server"><a href="#5-Configure-the-database-for-Zabbix-server" class="headerlink" title="5.Configure the database for Zabbix server"></a>5.Configure the database for Zabbix server</h2><p>编辑文件 &#x2F;etc&#x2F;zabbix_server.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DBPassword=&lt;your_password&gt;<br></code></pre></td></tr></table></figure><h2 id="6-Configure-PHP-for-Zabbix-frontend"><a href="#6-Configure-PHP-for-Zabbix-frontend" class="headerlink" title="6.Configure PHP for Zabbix frontend"></a>6.Configure PHP for Zabbix frontend</h2><p>编辑文件 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;zabbix.conf 取消注释并设置 ‘listen’ 和 ‘server_name’。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># listen 8080;</span><br><span class="hljs-comment"># server_name example.com;</span><br></code></pre></td></tr></table></figure><h2 id="7-Start-Zabbix-server-and-agent-processes"><a href="#7-Start-Zabbix-server-and-agent-processes" class="headerlink" title="7.Start Zabbix server and agent processes"></a>7.Start Zabbix server and agent processes</h2><p>启动 Zabbix Server 和 agent 进程，并使其在系统启动时启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]# systemctl <span class="hljs-built_in">enable</span> zabbix-server zabbix-agent nginx php-fpm --now<br></code></pre></td></tr></table></figure><h2 id="8-Open-Zabbix-UI-web-page"><a href="#8-Open-Zabbix-UI-web-page" class="headerlink" title="8.Open Zabbix UI web page"></a>8.Open Zabbix UI web page</h2><p>使用 Nginx 时 Zabbix UI 的 URL 取决于您进行的配置更改。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例&quot;&gt;&lt;a href=&quot;#RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例&quot; class=&quot;headerlink&quot; title=&quot;RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)&quot;&gt;&lt;/a&gt;RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)&lt;/h2&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="Zabbix" scheme="https://lilinzta.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>ansible 快速开始</title>
    <link href="https://lilinzta.github.io/2024/04/13/ansible-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>https://lilinzta.github.io/2024/04/13/ansible-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2024-04-13T01:52:47.000Z</published>
    <updated>2024-11-18T03:19:01.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h2><p>准备至少三台虚拟机，我的环境如下：</p><table><thead><tr><th align="center">OS</th><th align="center">IP</th><th align="center">hostname</th></tr></thead><tbody><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.130</td><td align="center">fd-master</td></tr><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.131</td><td align="center">fd-node1</td></tr><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.132</td><td align="center">fd-node2</td></tr></tbody></table><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h2><p><code>fd-master</code> 安装ansible，并配置 <code>fd-node1</code> 和 <code>fd-node2</code> 的ssh免密登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]# dnf install -y ansible<br>[root@fd-master:~]# ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;&lt;your_email&gt;&quot;</span><br>[root@fd-master:~]# ssh-copy-id -i /root/.ssh/id_ed25519.pub root@10.1.1.131<br>[root@fd-master:~]# ssh-copy-id -i /root/.ssh/id_ed25519.pub root@10.1.1.132<br></code></pre></td></tr></table></figure><p>编辑 <code>fd-master</code> 的 <code>hosts</code> 文件，添加 <code>fd-node1</code> 和 <code>fd-node2</code> 的IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]# vim /etc/hosts<br>10.1.1.130 ansible<br>10.1.1.131 node1<br>10.1.1.132 node2<br></code></pre></td></tr></table></figure><h2 id="3-ansible-相关配置"><a href="#3-ansible-相关配置" class="headerlink" title="3.ansible 相关配置"></a>3.ansible 相关配置</h2><p>把 <code>fd-node1</code> 和 <code>fd-node2</code> 两个主机添加进 <code>fd-master</code> 的主机列表里，两主机同属ws组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]# vim /etc/ansible/hosts<br>[ws]<br>node[1:2]<br></code></pre></td></tr></table></figure><h2 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4.测试连接"></a>4.测试连接</h2><p>测试 <code>fd-node1</code> 连通性<br><img src=/res/post/ansible/node1_ping.jpg width=100%></p><p>测试 <code>ws</code> 组连通性<br><img src=/res/post/ansible/ws_ping.jpg width=100%></p><h2 id="5-示例用法"><a href="#5-示例用法" class="headerlink" title="5.示例用法"></a>5.示例用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从 fd-master 拷贝文件到 ws 组中的所有机器，并设置权限，开启备份(即不覆盖原文件)</span><br>[root@fd-master:~]# ansible ws -m copy -a <span class="hljs-string">&#x27;src=/path/to/source dest=/path/to/destination owner=&lt;user_name&gt; group=&lt;group_name&gt; mode=777 backup=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建用户(lilin)</span><br>[root@fd-master:~]# ansible ws -m user -a <span class="hljs-string">&#x27;name=lilin state=present&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器为用户(lilin)设置密码</span><br>[root@fd-master:~]# <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;password&quot;</span> | openssl passwd -1 -stdin<br>$1$nvX4skcy<span class="hljs-variable">$EoJIwBB6WOf9keRecRJtq</span>.<br>[root@fd-master:~]# ansible ws -m user -a <span class="hljs-string">&#x27;name=lilin password=&quot;$1$nvX4skcy$EoJIwBB6WOf9keRecRJtq.&quot;&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器为用户(lilin)设置登录 shell (nologin意为禁止登录)</span><br>[root@fd-master:~]# ansible ws -m user -a <span class="hljs-string">&#x27;name=lilin shell=/sbin/nologin append=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器删除用户(lilin)</span><br>[root@fd-master:~]# ansible ws -m user -a <span class="hljs-string">&#x27;name=lilin state=absent&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器更新系统</span><br>[root@fd-master:~]# ansible ws -m dnf -a <span class="hljs-string">&#x27;name=&quot;*&quot; state=latest&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器安装 nginx</span><br>[root@fd-master:~]# ansible ws -m dnf -a <span class="hljs-string">&#x27;name=&quot;nginx&quot; state=latest&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器卸载 nginx</span><br>[root@fd-master:~]# ansible ws -m dnf -a <span class="hljs-string">&#x27;name=&quot;nginx&quot; state=absent&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器开启 nginx 服务并设置开机自启</span><br>[root@fd-master:~]# ansible ws -m service -a <span class="hljs-string">&#x27;name=nginx state=started enabled=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建文件</span><br>[root@fd-master:~]# ansible ws -m file -a <span class="hljs-string">&#x27;path=/path/to/file mode=777 state=touch&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建文件夹</span><br>[root@fd-master:~]# ansible ws -m file -a <span class="hljs-string">&#x27;path=/path/to/directory mode=777 state=directory&#x27;</span><br><br><span class="hljs-comment"># node1 主机信息收集</span><br>[root@fd-master:~]# ansible node1 -m setup<br><br><span class="hljs-comment"># node1 主机 ipv4 地址信息</span><br>[root@fd-master:~]# ansible node1 -m setup -a <span class="hljs-string">&#x27;filter=ansible_all_ipv4_addresses&#x27;</span><br><br><span class="hljs-comment"># 获取 ws 组中的所有机器的 hostname 信息(通过 shell 模块)</span><br>[root@fd-master:~]# ansible ws -m shell -a <span class="hljs-string">&#x27;hostname&#x27;</span> -o<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前置条件&quot;&gt;&lt;a href=&quot;#1-前置条件&quot; class=&quot;headerlink&quot; title=&quot;1.前置条件&quot;&gt;&lt;/a&gt;1.前置条件&lt;/h2&gt;&lt;p&gt;准备至少三台虚拟机，我的环境如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="ansible" scheme="https://lilinzta.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Spotify on Arch Linux</title>
    <link href="https://lilinzta.github.io/2024/03/12/Spotify-on-Arch-Linux/"/>
    <id>https://lilinzta.github.io/2024/03/12/Spotify-on-Arch-Linux/</id>
    <published>2024-03-12T11:29:09.000Z</published>
    <updated>2024-11-18T03:20:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-效果展示"><a href="#0-效果展示" class="headerlink" title="0.效果展示"></a>0.效果展示</h2><img src=/res/post/spotify/spotify.png width=100% /><h2 id="1-安装所有需要的软件包"><a href="#1-安装所有需要的软件包" class="headerlink" title="1.安装所有需要的软件包"></a>1.安装所有需要的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S spotify spotx-git spicetify-cli<br></code></pre></td></tr></table></figure><h2 id="2-自定义主题"><a href="#2-自定义主题" class="headerlink" title="2.自定义主题"></a>2.自定义主题</h2><blockquote><p>注意: 先执行 <code>spotx</code>，再更改主题。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取官方的主题仓库(当然你也可以自己找其它的)</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/spicetify/spicetify-themes.git<br><br><span class="hljs-comment"># 复制所有主题到spicetify指定的位置</span><br><span class="hljs-built_in">cd</span> spicetify-themes<br><span class="hljs-built_in">cp</span> -r * <span class="hljs-variable">$HOME</span>/.config/spicetify/Themes<br><br><span class="hljs-comment"># 执行spicetify生成配置文件</span><br><br><span class="hljs-comment"># 配置主题和配色(也可以直接修改配置文件~/.config/spicetify/config-xpui.ini)</span><br>spicetify config current_theme THEME_NAME<br>spicetify config color_scheme SCHEME_NAME<br><br><span class="hljs-comment"># 或许你还需要配置这个选项</span><br>prefs_path             = <span class="hljs-variable">$HOME</span>/.config/spotify/prefs<br><br><span class="hljs-comment"># 应用配置</span><br>spicetify apply<br></code></pre></td></tr></table></figure><h2 id="have-a-fun-😊"><a href="#have-a-fun-😊" class="headerlink" title="have a fun! 😊"></a>have a fun! 😊</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-效果展示&quot;&gt;&lt;a href=&quot;#0-效果展示&quot; class=&quot;headerlink&quot; title=&quot;0.效果展示&quot;&gt;&lt;/a&gt;0.效果展示&lt;/h2&gt;&lt;img src=/res/post/spotify/spotify.png width=100% /&gt;

&lt;h2</summary>
      
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="Spotify" scheme="https://lilinzta.github.io/tags/Spotify/"/>
    
  </entry>
  
  <entry>
    <title>在本地启动并运行大型语言模型</title>
    <link href="https://lilinzta.github.io/2024/03/09/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    <id>https://lilinzta.github.io/2024/03/09/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-03-09T14:57:04.000Z</published>
    <updated>2025-03-03T03:36:15.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ollama"><a href="#ollama" class="headerlink" title="ollama"></a><a href="https://ollama.com/">ollama</a></h2><p>Run Llama 2, Code Llama, and other models. Customize and create your own.<br>运行 Llama 2、Code Llama 和其他模型。自定义并创建您自己的。</p><h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><p><a href="https://ollama.com/download/Ollama-darwin.zip">macOS</a><br><a href="https://ollama.com/download/OllamaSetup.exe">Windows preview</a><br>Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://ollama.com/install.sh | sh<br></code></pre></td></tr></table></figure><p>Arch Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S ollama<br><span class="hljs-comment"># or</span><br><span class="hljs-built_in">sudo</span> pacman -S ollama-cuda<br></code></pre></td></tr></table></figure><h2 id="Docker-and-cpu-only"><a href="#Docker-and-cpu-only" class="headerlink" title="Docker and cpu only"></a>Docker and cpu only</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># CPU only</span><br>docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br><br><span class="hljs-comment"># Run model locally</span><br>docker <span class="hljs-built_in">exec</span> -it ollama ollama run llama2<br><br></code></pre></td></tr></table></figure><h2 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h2><p>本人Intel核显，视频是在朋友的电脑上运行的。</p><video id="video" width="100%" height="100%" controls="" preload="none" poster="/res/post/ollama/eos_ollama.png">      <source id="show" src="/res/post/ollama/eos_ollama.mp4" type="video/mp4"></videos>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ollama&quot;&gt;&lt;a href=&quot;#ollama&quot; class=&quot;headerlink&quot; title=&quot;ollama&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ollama.com/&quot;&gt;ollama&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Run Llama 2, Code Ll</summary>
      
    
    
    
    <category term="LLM" scheme="https://lilinzta.github.io/categories/LLM/"/>
    
    
    <category term="Ollama" scheme="https://lilinzta.github.io/tags/Ollama/"/>
    
  </entry>
  
  <entry>
    <title>内核无法加载,没有这个文件</title>
    <link href="https://lilinzta.github.io/2024/02/25/%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD-%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://lilinzta.github.io/2024/02/25/%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD-%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6/</id>
    <published>2024-02-25T08:25:53.000Z</published>
    <updated>2024-11-18T03:20:17.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h2><p>开学前想最后更新一次，更新内容包含了 linux, linux-zen。</p><p>下载了快2个G的内容，就在生成新的内核映像(或者叫镜像)时，kde 突然锁屏了，紧跟着光标也不动了，没错，突然死机。</p><h2 id="2-经过"><a href="#2-经过" class="headerlink" title="2.经过"></a>2.经过</h2><p>到了学校，再次开机时，就如标题所说。</p><p>从始至终，我是没有慌的。作为一名经验丰富的 Archer, 首先打开了google😅。输入关键字搜索后，得到了一些灵感，或许可以通过重装解决。</p><p>当然不是重装整个系统了。</p><ol><li>使开机进入 archiso 并连接网络</li><li>挂载系统，以我的为例:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/sda2 /mnt<br>mount /dev/sda1 /mnt/boot<br>mount /dev/sdb /home<br><span class="hljs-comment"># 第三个似乎有点多余😅</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重装 linux 和 linux-zen</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt linux linux-zen<br><span class="hljs-comment"># 其实我当时是chroot进去用的 pacman -S linux linux-zen，不是特别清楚 pacstrap 这个东西😅</span><br></code></pre></td></tr></table></figure><h2 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h2><p>结果我就写下了这篇博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1.起因&quot;&gt;&lt;/a&gt;1.起因&lt;/h2&gt;&lt;p&gt;开学前想最后更新一次，更新内容包含了 linux, linux-zen。&lt;/p&gt;
&lt;p&gt;下载了快2个G的内容，就在生成新的内</summary>
      
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Arch Linux 安装 qemu</title>
    <link href="https://lilinzta.github.io/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/"/>
    <id>https://lilinzta.github.io/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/</id>
    <published>2024-01-20T11:28:25.000Z</published>
    <updated>2024-11-18T03:20:43.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h2><p>KVM 需要主机支持虚拟化，通过下列命令查看是否支持(虚拟化支持可在 BIOS 中开启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ LC_ALL=C lscpu | grep Virtualization<br></code></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ pacman -S qemu libvirt ovmf virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables libguestfs<br></code></pre></td></tr></table></figure><h2 id="3-启动-KVM-libvirt-服务"><a href="#3-启动-KVM-libvirt-服务" class="headerlink" title="3.启动 KVM libvirt 服务"></a>3.启动 KVM libvirt 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ <span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now libvirtd.service<br></code></pre></td></tr></table></figure><h2 id="4-普通用户使用-KVM"><a href="#4-普通用户使用-KVM" class="headerlink" title="4.普通用户使用 KVM"></a>4.普通用户使用 KVM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ <span class="hljs-built_in">sudo</span> vim /etc/libvirt/libvirtd.conf<br><br>85 unix_sock_group = <span class="hljs-string">&quot;libvirt&quot;</span><br>108 unix_sock_rw_perms = <span class="hljs-string">&quot;0770&quot;</span><br><br>❯ <span class="hljs-built_in">sudo</span> usermod -aG libvirt $(<span class="hljs-built_in">whoami</span>)<br>❯ <span class="hljs-built_in">sudo</span> systemctl restart libvirtd.service<br></code></pre></td></tr></table></figure><h2 id="5-嵌套虚拟化"><a href="#5-嵌套虚拟化" class="headerlink" title="5.嵌套虚拟化"></a>5.嵌套虚拟化</h2><p>不讨论</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前置条件&quot;&gt;&lt;a href=&quot;#1-前置条件&quot; class=&quot;headerlink&quot; title=&quot;1.前置条件&quot;&gt;&lt;/a&gt;1.前置条件&lt;/h2&gt;&lt;p&gt;KVM 需要主机支持虚拟化，通过下列命令查看是否支持(虚拟化支持可在 BIOS 中开启)&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="qemu" scheme="https://lilinzta.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 4 安装系统</title>
    <link href="https://lilinzta.github.io/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lilinzta.github.io/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-12-12T14:42:36.000Z</published>
    <updated>2024-04-18T02:59:07.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验"><a href="#最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验" class="headerlink" title="最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验"></a>最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验</h2><span id="more"></span><h2 id="1-官方推荐方式"><a href="#1-官方推荐方式" class="headerlink" title="1.官方推荐方式"></a>1.官方推荐方式</h2><p>下载官方的烧写工具，它会自动替你下载镜像文件，还支持添加一些自定义配置，比如用户名和密码，wifi 和 ssh.</p><p>适合只有一台电脑和一个树莓派的情况.</p><blockquote><p>我是因为校园网的原因，只能使用电脑开热点，让树莓派去连.</p></blockquote><p>如果你在 GNU&#x2F;Linux 下开热点遇到困难，可以参考我的这个脚本(很久之前网上找的)，如果你有更好的方式，也欢迎在评论区留言.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">sudo</span> iw phy phy0 interface add wlan0_ap <span class="hljs-built_in">type</span> managed addr 12:34:56:ab:<span class="hljs-built_in">cd</span>:ef<br><br><span class="hljs-built_in">sudo</span> create_ap -c 11 wlan0_ap wlan0 NAME PASSWD &gt;/dev/null &amp;<br></code></pre></td></tr></table></figure><h2 id="2-安装其它的-GNU-Linux-ARM-版本"><a href="#2-安装其它的-GNU-Linux-ARM-版本" class="headerlink" title="2.安装其它的 GNU&#x2F;Linux ARM 版本"></a>2.安装其它的 GNU&#x2F;Linux ARM 版本</h2><p>文档都很详细，我就不多说了.</p><h3 id="Kali-Linux-ARM"><a href="#Kali-Linux-ARM" class="headerlink" title="Kali Linux ARM"></a><a href="https://www.kali.org/docs/arm/raspberry-pi-4/">Kali Linux ARM</a></h3><h3 id="Arch-Linux-ARM"><a href="#Arch-Linux-ARM" class="headerlink" title="Arch Linux ARM"></a><a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">Arch Linux ARM</a></h3><h2 id="3-TODO"><a href="#3-TODO" class="headerlink" title="3.TODO"></a>3.TODO</h2><p>32bit 和 64bit 的系统都试过，目前还没有通过HDMI接显示器进入过桌面环境.</p><p>放假回家之后树莓派能直接插路由器上，就能装 Arch Linux ARM 了😀.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验&quot;&gt;&lt;a href=&quot;#最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验&quot; class=&quot;headerlink&quot; title=&quot;最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验&quot;&gt;&lt;/a&gt;最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Raspberry Pi 4" scheme="https://lilinzta.github.io/tags/Raspberry-Pi-4/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab4(MNIST手写数字识别)</title>
    <link href="https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</id>
    <published>2023-11-26T02:19:32.000Z</published>
    <updated>2024-11-18T03:25:18.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python another_lab4/main.py<br></code></pre></td></tr></table></figure><blockquote><p>another_lab4&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> MNIST<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.fc1 = torch.nn.Linear(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>, <span class="hljs-number">64</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        <span class="hljs-variable language_">self</span>.fc3 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        <span class="hljs-variable language_">self</span>.fc4 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.fc1(x))<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.fc2(x))<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.fc3(x))<br>        x = torch.nn.functional.log_softmax(<span class="hljs-variable language_">self</span>.fc4(x), dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_loader</span>(<span class="hljs-params">is_train</span>):<br>    to_tensor = transforms.Compose([transforms.ToTensor()])<br>    data_set = MNIST(<span class="hljs-string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> DataLoader(data_set, batch_size=<span class="hljs-number">15</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate</span>(<span class="hljs-params">test_data, net</span>):<br>    n_correct = <span class="hljs-number">0</span><br>    n_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_data:<br>            outputs = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            <span class="hljs-keyword">for</span> i, output <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(outputs):<br>                <span class="hljs-keyword">if</span> torch.argmax(output) == y[i]:<br>                    n_correct += <span class="hljs-number">1</span><br>                n_total += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> n_correct / n_total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    train_data = get_data_loader(is_train=<span class="hljs-literal">True</span>)<br>    test_data = get_data_loader(is_train=<span class="hljs-literal">False</span>)<br>    net = Net()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))<br>    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_data:<br>            net.zero_grad()<br>            output = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            loss = torch.nn.functional.nll_loss(output, y)<br>            loss.backward()<br>            optimizer.step()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch&quot;</span>, epoch, <span class="hljs-string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))<br><br>    <span class="hljs-keyword">for</span> (n, (x, _)) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_data):<br>        <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span><br>        predict = torch.argmax(net.forward(x[<span class="hljs-number">0</span>].view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>)))<br>        plt.figure(n)<br>        plt.imshow(x[<span class="hljs-number">0</span>].view(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>))<br>        plt.title(<span class="hljs-string">&quot;prediction: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(predict)))<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/another_lab4-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab3(基于线性回归的预测)</title>
    <link href="https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/"/>
    <id>https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/</id>
    <published>2023-11-26T02:04:38.000Z</published>
    <updated>2024-11-18T03:25:14.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab3/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab3&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_california_housing<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> linearregression<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-comment"># 加载加利福尼亚州房价数据集</span><br>    housing_22 = fetch_california_housing()<br>    x_22, y_22 = housing_22.data, housing_22.target<br><br>    <span class="hljs-comment"># 划分数据集为训练集和测试集</span><br>    x_train_22, x_test_22, y_train_22, y_test_22 = train_test_split(<br>        x_22, y_22, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br>    <span class="hljs-comment"># 初始化线性回归模型</span><br>    model_22 = linearregression()<br><br>    <span class="hljs-comment"># 训练模型</span><br>    model_22.fit(x_train_22, y_train_22)<br><br>    <span class="hljs-comment"># 在测试集上进行预测</span><br>    y_pred_22 = model_22.predict(x_test_22)<br><br>    <span class="hljs-comment"># 评估模型性能</span><br>    mse_22 = mean_squared_error(y_test_22, y_pred_22)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mean squared error on test set: <span class="hljs-subst">&#123;mse_22&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 绘制真实值与预测值的对比图</span><br>    plt.scatter(y_test_22, y_pred_22)<br>    plt.xlabel(<span class="hljs-string">&#x27;true values&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;predictions&#x27;</span>)<br>    plt.title(<span class="hljs-string">&#x27;true values vs. predictions&#x27;</span>)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab3-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab2(K-Means)</title>
    <link href="https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/"/>
    <id>https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/</id>
    <published>2023-11-16T09:49:40.000Z</published>
    <updated>2024-11-18T03:25:12.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab2/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab2&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html</span><br><br><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_digits<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 使用load_digits()加载数字数据集，并提取特征和标签。确定了样本数、特征数和唯一标签的数量。</span><br>data_22, labels_22 = load_digits(return_X_y=<span class="hljs-literal">True</span>)<br>(n_samples, n_features), n_digits_22 = data_22.shape, np.unique(labels_22).size<br><br><span class="hljs-comment"># 使用PCA将数据的维度减少为2个，以便进行可视化。</span><br>reduced_data_22 = PCA(n_components=<span class="hljs-number">2</span>).fit_transform(data_22)<br><br><span class="hljs-comment"># 在减少的数据上应用K均值，并创建一个2D散点图以可视化聚类。</span><br>kmeans_22 = KMeans(init=<span class="hljs-string">&quot;k-means++&quot;</span>, n_clusters=n_digits_22, n_init=<span class="hljs-number">4</span>)<br>kmeans_22.fit(reduced_data_22)<br><br><span class="hljs-comment"># 定义一个网格中的点的步长</span><br>h = <span class="hljs-number">0.02</span><br><br>x_min, x_max = reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>y_min, y_max = reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 生成一个网格，以便在图中可视化聚类的结果</span><br>xx_22, yy_22 = np.meshgrid(np.arange(x_min, x_max, h),<br>                           np.arange(y_min, y_max, h))<br><br>Z = kmeans_22.predict(np.c_[xx_22.ravel(), yy_22.ravel()])<br><br>Z = Z.reshape(xx_22.shape)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.clf()<br><br><span class="hljs-comment"># 在2D空间上绘制聚类结果，用白色十字标记聚类中心。</span><br>plt.imshow(Z,<br>           interpolation=<span class="hljs-string">&quot;nearest&quot;</span>,<br>           extent=(xx_22.<span class="hljs-built_in">min</span>(),<br>                   xx_22.<span class="hljs-built_in">max</span>(),<br>                   yy_22.<span class="hljs-built_in">min</span>(),<br>                   yy_22.<span class="hljs-built_in">max</span>()),<br>           cmap=plt.cm.Paired,<br>           aspect=<span class="hljs-string">&quot;auto&quot;</span>,<br>           origin=<span class="hljs-string">&quot;lower&quot;</span>,)<br><br>plt.plot(reduced_data_22[:, <span class="hljs-number">0</span>], reduced_data_22[:, <span class="hljs-number">1</span>], <span class="hljs-string">&quot;k.&quot;</span>, markersize=<span class="hljs-number">2</span>)<br>centroids = kmeans_22.cluster_centers_<br>plt.scatter(centroids[:, <span class="hljs-number">0</span>],<br>            centroids[:, <span class="hljs-number">1</span>],<br>            marker=<span class="hljs-string">&quot;x&quot;</span>,<br>            s=<span class="hljs-number">169</span>,<br>            linewidths=<span class="hljs-number">3</span>,<br>            color=<span class="hljs-string">&quot;w&quot;</span>,<br>            zorder=<span class="hljs-number">10</span>)<br>plt.title(<br>    <span class="hljs-string">&quot;K-means clustering on the digits dataset (PCA-reduced data)\n&quot;</span><br>    <span class="hljs-string">&quot;Centroids are marked with white cross&quot;</span><br>)<br>plt.xlim(x_min, x_max)<br>plt.ylim(y_min, y_max)<br>plt.xticks(())<br>plt.yticks(())<br><br><span class="hljs-comment"># 显示绘图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab2-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab1(KNN)</title>
    <link href="https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/"/>
    <id>https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/</id>
    <published>2023-11-16T09:07:55.000Z</published>
    <updated>2024-11-18T03:25:09.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv venv<br></code></pre></td></tr></table></figure><h2 id="2-激活虚拟环境"><a href="#2-激活虚拟环境" class="headerlink" title="2.激活虚拟环境"></a>2.激活虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> venv/bin/activate<br></code></pre></td></tr></table></figure><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab1/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab1&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://tjxlab.gitbooks.io/bigdata/content/da-shu-ju-fen-xi-yu-wa-jue-shi-yan/shi-yanyi-ff1a-knn-fen-lei-shi-yan.html</span><br><br><span class="hljs-comment"># numpy 库用于科学计算，matplotlib 库用于绘图</span><br><span class="hljs-comment"># Scikit-learn 库中的 neighbors 模块和 datasets 模块分别包含KNN分类器和一些常用的数据集</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib.colors <span class="hljs-keyword">import</span> ListedColormap<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> neighbors, datasets<br><br><span class="hljs-comment"># 定义邻居个数，设定KNN算法中邻居个数为15</span><br>n_neighbors_22 = <span class="hljs-number">15</span><br><br><span class="hljs-comment"># 加载iris数据集，使用 Scikit-learn 中的 load_iris() 函数加载鸢尾花数据集</span><br>iris_22 = datasets.load_iris()<br><br><span class="hljs-comment"># 选择特征，使用了鸢尾花数据集中的前两个特征</span><br>X_22 = iris_22.data[:, :<span class="hljs-number">2</span>]<br>y_22 = iris_22.target<br><br><span class="hljs-comment"># 设置步长和创建颜色映射，h 是在可视化决策边界时使用的步长</span><br><span class="hljs-comment"># cmap_light 和 cmap_bold 是两个颜色映射，用于可视化轻量级背景和加粗版背景颜色</span><br>h_22 = <span class="hljs-number">.02</span>  <span class="hljs-comment"># step size in the mesh</span><br>cmap_light = ListedColormap([<span class="hljs-string">&#x27;#FFAAAA&#x27;</span>, <span class="hljs-string">&#x27;#AAFFAA&#x27;</span>, <span class="hljs-string">&#x27;#AAAAFF&#x27;</span>])<br>cmap_bold = ListedColormap([<span class="hljs-string">&#x27;#FF0000&#x27;</span>, <span class="hljs-string">&#x27;#00FF00&#x27;</span>, <span class="hljs-string">&#x27;#0000FF&#x27;</span>])<br><br><span class="hljs-comment"># 循环进行KNN分类和可视化</span><br><span class="hljs-keyword">for</span> weights <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;uniform&#x27;</span>, <span class="hljs-string">&#x27;distance&#x27;</span>]:<br>    <span class="hljs-comment"># 使用循环，分别使用两种权重（uniform和distance）创建KNN分类器实例，并对数据进行拟合。</span><br>    clf = neighbors.KNeighborsClassifier(n_neighbors_22, weights=weights)<br>    clf.fit(X_22, y_22)<br><br>    <span class="hljs-comment"># 为了绘制决策边界，定义一个网格，并在网格上计算模型的预测值</span><br>    x_min, x_max = X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    y_min, y_max = X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    xx, yy = np.meshgrid(np.arange(x_min, x_max, h_22),<br>                         np.arange(y_min, y_max, h_22))<br><br>    <span class="hljs-comment"># 使用模型对网格中的点进行预测</span><br>    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])<br><br>    <span class="hljs-comment"># 将预测结果以颜色的形式绘制在网格上</span><br>    Z = Z.reshape(xx.shape)<br>    plt.figure()<br>    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)<br><br>    <span class="hljs-comment"># 将训练数据集上的点用散点图表示，并显示图表的标题</span><br>    plt.scatter(X_22[:, <span class="hljs-number">0</span>], X_22[:, <span class="hljs-number">1</span>], c=y_22, cmap=cmap_bold,<br>                edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, s=<span class="hljs-number">20</span>)<br>    plt.xlim(xx.<span class="hljs-built_in">min</span>(), xx.<span class="hljs-built_in">max</span>())<br>    plt.ylim(yy.<span class="hljs-built_in">min</span>(), yy.<span class="hljs-built_in">max</span>())<br>    plt.title(<span class="hljs-string">&quot;3-Class classification (k = %i, weights = &#x27;%s&#x27;)&quot;</span><br>              % (n_neighbors_22, weights))<br><br><span class="hljs-comment"># 最后，通过 plt.show() 将图形显示出来</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab1-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/tags/lab/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 切换 java 环境</title>
    <link href="https://lilinzta.github.io/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/"/>
    <id>https://lilinzta.github.io/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/</id>
    <published>2023-10-23T09:06:06.000Z</published>
    <updated>2024-11-18T03:20:39.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="archlinux-java"><a href="#archlinux-java" class="headerlink" title="archlinux-java"></a>archlinux-java</h2><p>输出如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java --<span class="hljs-built_in">help</span><br>archlinux-java &lt;COMMAND&gt;<br><br>COMMAND:<br>statusList installed Java environments and enabled one<br>getReturn the short name of the Java environment <span class="hljs-built_in">set</span> as default<br><span class="hljs-built_in">set</span> &lt;JAVA_ENV&gt;Force &lt;JAVA_ENV&gt; as default<br><span class="hljs-built_in">unset</span>Unset current default Java environment<br>fixFix an invalid/broken default Java environment configuration<br></code></pre></td></tr></table></figure><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>获取当前设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java get<br>java-21-openjdk<br></code></pre></td></tr></table></figure><p>查看所有可用 Java 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java status<br>Available Java environments:<br>  java-11-openjdk<br>  java-17-openjdk<br>  java-21-openjdk (default)<br>  java-8-openjdk<br></code></pre></td></tr></table></figure><p>要更改默认设置，请使用 root 权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ <span class="hljs-built_in">sudo</span> archlinux-java <span class="hljs-built_in">set</span> java-17-openjdk<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;archlinux-java&quot;&gt;&lt;a href=&quot;#archlinux-java&quot; class=&quot;headerlink&quot; title=&quot;archlinux-java&quot;&gt;&lt;/a&gt;archlinux-java&lt;/h2&gt;&lt;p&gt;输出如下:&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="java" scheme="https://lilinzta.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>计算机教学中消失的一个学期</title>
    <link href="https://lilinzta.github.io/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/"/>
    <id>https://lilinzta.github.io/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/</id>
    <published>2023-09-18T12:55:46.000Z</published>
    <updated>2024-11-18T03:26:34.163Z</updated>
    
    <content type="html"><![CDATA[<p>正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。</p><span id="more"></span><p>例如 Shell 编程、命令行配置、Git、Vim、tmux、ssh 等等。如果你是一个计算机小白，那么非常建议你学习一下这门课。</p><p>学习时长：10小时</p><h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul><li>课程网站：<a href="https://missing.csail.mit.edu/2020/">https://missing.csail.mit.edu/2020/</a></li><li>课程中文网站: <a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a></li><li>课程视频：<a href="https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J">https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J</a></li><li>课程中文字幕视频：<ul><li>Missing<em>Semi</em>中译组（未完结）：<a href="https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click</a></li><li>刘黑黑a（已完结）：<a href="https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click</a></li></ul></li><li>课程作业：一些随堂小练习，具体见课程网站。<blockquote><p>source: <a href="https://csdiy.wiki/">cs自学指南</a></p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Course" scheme="https://lilinzta.github.io/tags/Course/"/>
    
  </entry>
  
  <entry>
    <title>shell_gpt</title>
    <link href="https://lilinzta.github.io/2023/08/26/shell-gpt/"/>
    <id>https://lilinzta.github.io/2023/08/26/shell-gpt/</id>
    <published>2023-08-26T08:24:01.000Z</published>
    <updated>2025-03-03T03:35:48.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务"><a href="#由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务" class="headerlink" title="由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务"></a>由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务</h2><span id="more"></span><blockquote><p>Tips: 下面都是废话，可以直接看这两个链接：<a href="https://github.com/chatanywhere/GPT_API_free">GPT_API_free</a>和<a href="https://github.com/TheR1D/shell_gpt">shell_gpt</a></p></blockquote><h2 id="获取一个免费的GPT-API"><a href="#获取一个免费的GPT-API" class="headerlink" title="获取一个免费的GPT_API"></a>获取一个免费的GPT_API</h2><p>点击第一个链接，获取免费的 GPT_API，当然也可以付费获得更好的体验。</p><p>与官方的 API 使用步骤基本相同，需要额外设置代理，具体使用可以详细阅读文档。</p><h2 id="shell-gpt-使用-GPT-API-free"><a href="#shell-gpt-使用-GPT-API-free" class="headerlink" title="shell_gpt 使用 GPT_API_free"></a>shell_gpt 使用 GPT_API_free</h2><p>第二个链接，使用方法说的很详细。配置文件在<code>$HOME/.config/shell_gpt/.sgptrc</code>,需要配置(修改)以下两个变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPENAI_API_KEY=领取的免费API(一般为 sk- 开头)<br>OPENAI_API_HOST=https://api.chatanywhere.cn 或者 https://api.chatanywhere.com.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务&quot;&gt;&lt;a href=&quot;#由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务&quot; class=&quot;headerlink&quot; title=&quot;由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务&quot;&gt;&lt;/a&gt;由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务&lt;/h2&gt;</summary>
    
    
    
    <category term="LLM" scheme="https://lilinzta.github.io/categories/LLM/"/>
    
    
    <category term="gpt" scheme="https://lilinzta.github.io/tags/gpt/"/>
    
  </entry>
  
  <entry>
    <title>Desktop Cube</title>
    <link href="https://lilinzta.github.io/2023/08/16/Desktop-Cube/"/>
    <id>https://lilinzta.github.io/2023/08/16/Desktop-Cube/</id>
    <published>2023-08-16T01:00:45.000Z</published>
    <updated>2025-03-10T02:04:30.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟桌面切换特效"><a href="#虚拟桌面切换特效" class="headerlink" title="虚拟桌面切换特效"></a>虚拟桌面切换特效</h2><span id="more"></span><p><a href="https://github.com/zzag/kwin-effects-cube">KDE</a><br><a href="https://github.com/Schneegans/Desktop-Cube">GNOME</a></p><p>好像 GNOME 的可玩性更高一点(仅指这个扩展)，改天试试 Debian+GNOME。</p><h2 id="Install-for-KDE-and-…"><a href="#Install-for-KDE-and-…" class="headerlink" title="Install for KDE and …"></a>Install for KDE and …</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S kwin-effects-cube<br></code></pre></td></tr></table></figure><p>安装完后依次点击 <code>工作区行为 -&gt; 桌面特效 -&gt; Cube</code> 进行设置</p><h2 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h2><video id="video" width="100%" height="100%" controls="" preload="none" poster="/res/post/Desktop-Cube/Desktop-Cube.jpg">      <source id="show" src="/res/post/Desktop-Cube/Desktop-Cube.mp4" type="video/mp4"></videos>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;虚拟桌面切换特效&quot;&gt;&lt;a href=&quot;#虚拟桌面切换特效&quot; class=&quot;headerlink&quot; title=&quot;虚拟桌面切换特效&quot;&gt;&lt;/a&gt;虚拟桌面切换特效&lt;/h2&gt;</summary>
    
    
    
    
    <category term="KDE" scheme="https://lilinzta.github.io/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>Neovim Switcher</title>
    <link href="https://lilinzta.github.io/2023/08/15/Neovim-Switcher/"/>
    <id>https://lilinzta.github.io/2023/08/15/Neovim-Switcher/</id>
    <published>2023-08-15T05:36:46.000Z</published>
    <updated>2024-11-18T03:24:42.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在多种-Neovime-配置之间无缝切换"><a href="#在多种-Neovime-配置之间无缝切换" class="headerlink" title="在多种 Neovime 配置之间无缝切换"></a>在多种 Neovime 配置之间无缝切换</h2><span id="more"></span><blockquote><p><a href="https://www.youtube.com/watch?v=LkHjJlSgKZY">视频介绍在这里</a><br><a href="https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b">不喜欢看视频?</a></p></blockquote><p>zsh 用户在 .zshrc 加入以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> nvim-lazy=<span class="hljs-string">&quot;NVIM_APPNAME=LazyVim nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-kick=<span class="hljs-string">&quot;NVIM_APPNAME=kickstart nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-chad=<span class="hljs-string">&quot;NVIM_APPNAME=NvChad nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-astro=<span class="hljs-string">&quot;NVIM_APPNAME=AstroNvim nvim&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">nvims</span></span>() &#123;<br>  items=(<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-string">&quot;kickstart&quot;</span> <span class="hljs-string">&quot;LazyVim&quot;</span> <span class="hljs-string">&quot;NvChad&quot;</span> <span class="hljs-string">&quot;AstroNvim&quot;</span>)<br>  config=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;items[@]&#125;</span>&quot;</span> | fzf --prompt=<span class="hljs-string">&quot; Neovim Config ❯ &quot;</span> --height=~50% --layout=reverse --border --exit-0)<br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-variable">$config</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nothing selected&quot;</span><br>    <span class="hljs-built_in">return</span> 0<br>  <span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$config</span> == <span class="hljs-string">&quot;default&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    config=<span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  NVIM_APPNAME=<span class="hljs-variable">$config</span> nvim <span class="hljs-variable">$@</span><br>&#125;<br><br><span class="hljs-built_in">bindkey</span> -s ^a <span class="hljs-string">&quot;nvims\n&quot;</span><br></code></pre></td></tr></table></figure><p>使用 git 来管理似乎会很有意思，可惜我 git 太烂，改天再逝。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在多种-Neovime-配置之间无缝切换&quot;&gt;&lt;a href=&quot;#在多种-Neovime-配置之间无缝切换&quot; class=&quot;headerlink&quot; title=&quot;在多种 Neovime 配置之间无缝切换&quot;&gt;&lt;/a&gt;在多种 Neovime 配置之间无缝切换&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Neovim" scheme="https://lilinzta.github.io/tags/Neovim/"/>
    
  </entry>
  
  <entry>
    <title>kde-connect</title>
    <link href="https://lilinzta.github.io/2023/08/08/kde-connect/"/>
    <id>https://lilinzta.github.io/2023/08/08/kde-connect/</id>
    <published>2023-08-08T09:27:02.000Z</published>
    <updated>2024-04-18T02:58:36.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-kdeconnect-优雅地传文件-局域网"><a href="#使用-kdeconnect-优雅地传文件-局域网" class="headerlink" title="使用 kdeconnect 优雅地传文件(局域网)"></a>使用 kdeconnect 优雅地传文件(局域网)</h2><span id="more"></span><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ul><li>Windows: <a href="https://apps.microsoft.com/store/detail/kde-connect/9N93MRMSXBF0">Microsoft Store</a></li><li>Linux: pkg name is <code>kdeconnect-kde</code>, <code>kdeconnect-plasma</code>, just <code>kdeconnect</code> or <code>kde-connect</code></li><li>Android: <a href="https://play.google.com/store/apps/details?id=org.kde.kdeconnect_tp&pli=1">Play Store</a>or<a href="https://f-droid.org/packages/org.kde.kdeconnect_tp/">F-Droid</a></li><li>IOS: <a href="https://apps.apple.com/us/app/kde-connect/id1580245991">App Store</a></li></ul><h2 id="2-cli"><a href="#2-cli" class="headerlink" title="2.cli"></a>2.cli</h2><p>图形界面的使用不再介绍，可以自行探索</p><p>使用 <code>kdeconnect-cli -h</code> 查看帮助，获得以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: kdeconnect-cli [options]<br>KDE Connect CLI tool<br><br>Options:<br>  -l, --list-devices            List all devices<br>  -a, --list-available          List available (paired and reachable) devices<br>  --id-only                     Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span>, to ease scripting<br>  --name-only                   Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices name, to ease scripting<br>  --id-name-only                Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span> and name, to ease scripting<br>  --refresh                     Search <span class="hljs-keyword">for</span> devices <span class="hljs-keyword">in</span> the network and<br>                                re-establish connections<br>  --pair                        Request pairing to a said device<br>  --ring                        Find the said device by ringing it.<br>  --unpair                      Stop pairing to a said device<br>  --ping                        Sends a ping to said device<br>  --ping-msg &lt;message&gt;          Same as ping but you can <span class="hljs-built_in">set</span> the message to<br>                                display<br>  --share &lt;path or URL&gt;         Share a file/URL to a said device<br>  --share-text &lt;text&gt;           Share text to a said device<br>  --list-notifications          Display the notifications on a said device<br>  --lock                        Lock the specified device<br>  --unlock                      Unlock the specified device<br>  --send-sms &lt;message&gt;          Sends an SMS. Requires destination<br>  --destination &lt;phone number&gt;  Phone number to send the message<br>  --attachment &lt;file urls&gt;      File urls to send attachments with the message<br>                                (can be passed multiple <span class="hljs-built_in">times</span>)<br>  --device, -d &lt;dev&gt;            Device ID<br>  --name, -n &lt;name&gt;             Device Name<br>  --encryption-info             Get encryption info about said device<br>  --list-commands               Lists remote commands and their ids<br>  --execute-command &lt;<span class="hljs-built_in">id</span>&gt;        Executes a remote <span class="hljs-built_in">command</span> by <span class="hljs-built_in">id</span><br>  -k, --send-keys &lt;key&gt;         Sends keys to a said device<br>  --my-id                       Display this device<span class="hljs-string">&#x27;s id and exit</span><br><span class="hljs-string">  --photo &lt;path&gt;                Open the connected device&#x27;</span>s camera and transfer<br>                                the photo<br>  -h, --<span class="hljs-built_in">help</span>                    Displays <span class="hljs-built_in">help</span> on commandline options.<br>  --help-all                    Displays <span class="hljs-built_in">help</span> including Qt specific options.<br>  -v, --version                 Displays version information.<br>  --author                      Show author information.<br>  --license                     Show license information.<br>  --desktopfile &lt;file name&gt;     The base file name of the desktop entry <span class="hljs-keyword">for</span><br>                                this application.<br></code></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Arch -&gt; Android</span><br><span class="hljs-built_in">alias</span> kcp=<span class="hljs-string">&quot;kdeconnect-cli -n &lt;device name&gt; --share&quot;</span><br>kcp &lt;path_to_file&gt;<br><span class="hljs-comment"># Android -&gt; Arch</span><br>乖乖用 GUI 罢<br></code></pre></td></tr></table></figure><p>高级用法请根据自己的习惯和文档自行探索</p><blockquote><p>参考链接: <a href="https://github.com/KDE/kdeconnect-kde">https://github.com/KDE/kdeconnect-kde</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用-kdeconnect-优雅地传文件-局域网&quot;&gt;&lt;a href=&quot;#使用-kdeconnect-优雅地传文件-局域网&quot; class=&quot;headerlink&quot; title=&quot;使用 kdeconnect 优雅地传文件(局域网)&quot;&gt;&lt;/a&gt;使用 kdeconnect 优雅地传文件(局域网)&lt;/h2&gt;</summary>
    
    
    
    
    <category term="KDE" scheme="https://lilinzta.github.io/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 安装 VMware Workstation</title>
    <link href="https://lilinzta.github.io/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/"/>
    <id>https://lilinzta.github.io/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/</id>
    <published>2023-08-07T00:43:57.000Z</published>
    <updated>2025-03-10T02:03:51.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Arch-Linux-从-AUR-源安装-VMware-Workstation"><a href="#Arch-Linux-从-AUR-源安装-VMware-Workstation" class="headerlink" title="Arch Linux 从 AUR 源安装 VMware Workstation"></a>Arch Linux 从 AUR 源安装 VMware Workstation</h2><span id="more"></span><p>更完整的安装说明请参考 <a href="https://wiki.archlinuxcn.org/wiki/VMware">Arch Wiki</a></p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S fuse2 gtkmm linux-headers ncurses libcanberra pcsclite<br></code></pre></td></tr></table></figure><h2 id="2-安装-VMware-Workstation"><a href="#2-安装-VMware-Workstation" class="headerlink" title="2.安装 VMware Workstation"></a>2.安装 VMware Workstation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S vmware-workstation<br></code></pre></td></tr></table></figure><h2 id="3-开启服务"><a href="#3-开启服务" class="headerlink" title="3.开启服务"></a>3.开启服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start vmware-networks.service<br>systemctl start vmware-usbarbitrator.service<br></code></pre></td></tr></table></figure><h2 id="4-加载-VMware-模块"><a href="#4-加载-VMware-模块" class="headerlink" title="4.加载 VMware 模块"></a>4.加载 VMware 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> modprobe -a vmw_vmci vmmon<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Arch-Linux-从-AUR-源安装-VMware-Workstation&quot;&gt;&lt;a href=&quot;#Arch-Linux-从-AUR-源安装-VMware-Workstation&quot; class=&quot;headerlink&quot; title=&quot;Arch Linux 从 AUR 源安装 VMware Workstation&quot;&gt;&lt;/a&gt;Arch Linux 从 AUR 源安装 VMware Workstation&lt;/h2&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
    <category term="VMware" scheme="https://lilinzta.github.io/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Arch base install</title>
    <link href="https://lilinzta.github.io/2023/07/16/Arch-base-install/"/>
    <id>https://lilinzta.github.io/2023/07/16/Arch-base-install/</id>
    <published>2023-07-15T16:00:00.000Z</published>
    <updated>2025-03-10T02:03:02.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录了我曾经安装Arch-Linux的大致步骤"><a href="#记录了我曾经安装Arch-Linux的大致步骤" class="headerlink" title="记录了我曾经安装Arch Linux的大致步骤"></a>记录了我曾经安装Arch Linux的大致步骤</h2><span id="more"></span><blockquote><p>update time：2023-4-16</p></blockquote><h2 id="0-连接-wifi"><a href="#0-连接-wifi" class="headerlink" title="0.连接 wifi"></a>0.连接 wifi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iwctl<br>station wlan0 scan<br>station wlan0 get-networks<br>station wlan0 connect SSID<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h2 id="1-确保-UEFI-模式启动"><a href="#1-确保-UEFI-模式启动" class="headerlink" title="1.确保 UEFI 模式启动"></a>1.确保 UEFI 模式启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure><h2 id="2-禁用自动更新-mirrorlist-的-reflector"><a href="#2-禁用自动更新-mirrorlist-的-reflector" class="headerlink" title="2.禁用自动更新 mirrorlist 的 reflector"></a>2.禁用自动更新 mirrorlist 的 reflector</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop reflector.service<br></code></pre></td></tr></table></figure><h2 id="3-检查时钟服务状态"><a href="#3-检查时钟服务状态" class="headerlink" title="3.检查时钟服务状态"></a>3.检查时钟服务状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl status<br></code></pre></td></tr></table></figure><h2 id="4-换源"><a href="#4-换源" class="headerlink" title="4.换源"></a>4.换源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/pacman.d/mirrorlist<br>Server = https://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>Server = https://mirrors.hit.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><h2 id="5-分区"><a href="#5-分区" class="headerlink" title="5.分区"></a>5.分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfdisk /dev/sd(x)<br></code></pre></td></tr></table></figure><h2 id="6-格式化"><a href="#6-格式化" class="headerlink" title="6.格式化"></a>6.格式化</h2><p>&#x2F; 和 &#x2F;home 格式化成 ext4 类型，EFI 分区格式化成 vfat 类型，交换分区使用 mkswap 初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/root_part<br>mkfs.vfat /efi_system_part<br>mkswap /dev/swap_part<br></code></pre></td></tr></table></figure><h2 id="7-挂载"><a href="#7-挂载" class="headerlink" title="7.挂载"></a>7.挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/root_part /mnt<br>mount --<span class="hljs-built_in">mkdir</span> /dev/efi_system_part /mnt/boot<br>swapon /dev/swap_part<br></code></pre></td></tr></table></figure><h2 id="8-安装必需的软件包"><a href="#8-安装必需的软件包" class="headerlink" title="8.安装必需的软件包"></a>8.安装必需的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt base base-devel linux linux-firmware dhcpcd iwd networkmanager wireless_tools wpa_supplicant vim git<br></code></pre></td></tr></table></figure><h2 id="9-配置系统"><a href="#9-配置系统" class="headerlink" title="9.配置系统"></a>9.配置系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Fstab</span><br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br><br><span class="hljs-comment"># Chroot</span><br>arch-chroot /mnt<br><br><span class="hljs-comment"># 设置上海时区</span><br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><br><span class="hljs-comment"># 同步系统时间到硬件</span><br>hwclock --systohc<br><br><span class="hljs-comment"># 本地化</span><br>vim /etc/locale.gen<br>locale-gen<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;LANG=en_US.UTF-8&quot;</span> &gt; /etc/locale.conf<br><br><span class="hljs-comment"># 安装微码</span><br>pacman -S intel-ucode  <span class="hljs-comment"># Intel</span><br>pacman -S amd-ucode   <span class="hljs-comment"># AMD</span><br><br><span class="hljs-comment"># 安装grub引导</span><br>pacman -S grub efibootmgr<br>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="10-完成安装"><a href="#10-完成安装" class="headerlink" title="10.完成安装"></a>10.完成安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置密码</span><br>passwd<br><span class="hljs-comment"># exit</span><br>umount -R /mnt<br>reboot<br></code></pre></td></tr></table></figure><h2 id="11-图形化安装"><a href="#11-图形化安装" class="headerlink" title="11.图形化安装"></a>11.图形化安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Syyu<br>useradd -m -G wheel -s /bin/bash &lt;username&gt;<br>passwd &lt;username&gt;<br>EDITOR=vim visudo<br><span class="hljs-comment"># wheel ALL=(ALL)ALL ---&gt; wheel ALL=(ALL)ALL</span><br><br>pacman -S plasma-meta konsole dolphin<br>systemctl <span class="hljs-built_in">enable</span> sddm<br><br><span class="hljs-comment"># vim /etc/pacman.conf</span><br>[archlinuxcn]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br>pacman -Syyu<br></code></pre></td></tr></table></figure><h2 id="12-基础功能包"><a href="#12-基础功能包" class="headerlink" title="12.基础功能包"></a>12.基础功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S ntfs-3g wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts.emoji firefox paru<br><br><span class="hljs-comment"># fcitx5 中文输入法</span><br><span class="hljs-built_in">sudo</span> pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki<br>paru -S fcitx5-material-color<br>vim /etc/environment<br>GTK_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>QT_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;记录了我曾经安装Arch-Linux的大致步骤&quot;&gt;&lt;a href=&quot;#记录了我曾经安装Arch-Linux的大致步骤&quot; class=&quot;headerlink&quot; title=&quot;记录了我曾经安装Arch Linux的大致步骤&quot;&gt;&lt;/a&gt;记录了我曾经安装Arch Linux的大致步骤&lt;/h2&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://lilinzta.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lilinzta.github.io/2023/07/16/hello-world/"/>
    <id>https://lilinzta.github.io/2023/07/16/hello-world/</id>
    <published>2023-07-15T16:00:00.000Z</published>
    <updated>2024-04-18T02:58:29.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-Hexo"><a href="#Welcome-to-Hexo" class="headerlink" title="Welcome to Hexo!"></a>Welcome to <a href="https://hexo.io/">Hexo</a>!</h2><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Welcome-to-Hexo&quot;&gt;&lt;a href=&quot;#Welcome-to-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Welcome to Hexo!&quot;&gt;&lt;/a&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;!&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
